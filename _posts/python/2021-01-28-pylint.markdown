---
layout: post
category: python
title: How to use Pylint in pre-commit hooks, Github Actions and continuous integration
permalink: /pylint
---
<div class="wide-logos" markdown="1">
![python](/assets/python.png)
</div>

Pylint can check for many problems, but my first go-to with linters is always
the "unused import" rule which ensures nothing is imported that isn't used. If
you want to use more rules, adjust the below commands accordingly.

## Pre-commit hooks

Install [pre-commit](https://pre-commit.com).

Add the following `.pre-commit-config.yaml` file to the root of your
repository.

```yaml
repos:
  - repo: https://github.com/pre-commit/mirrors-pylint
    rev: v2.4.2
    hooks:
      - id: pylint
        args: [--disable=all, --enable=unused-import]
```

Install the git hooks:
```sh
pre-commit install  # or "autoupdate" if you've already installed previously.
```

This will abort a commit if an import isn't used.

## Github Actions

Create a `.github/workflows/checks.yml` file in the root of your repository and
add the following.

```sh
name: Checks
on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Checks
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - run: |
        pip install --upgrade pip
        pip install pylint==v3.0.0a3
        pylint --disable=all --enable=unused-import mypackage
```

## Continuous Integration

To fail the build if Pylint finds an error, simply call Pylint in your build
script.

```sh
pylint --disable=all --enable=unused-import /path/to/code
```

Pylint will exit with a non-zero exit status if it finds an error, which should
fail the build.

## See also

- [Use Black in Vim, pre-commit hooks, Github Actions and continuous integration](/black)
- [Use Mypy in pre-commit hooks, Github Actions and continuous integration](/mypy)
