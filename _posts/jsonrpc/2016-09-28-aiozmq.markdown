---
layout: post
category: jsonrpc
date: 2016-09-28
title: JSON-RPC in Python over ZeroMQ, asynchronously
permalink: /jsonrpc/zeromq-async
---
<div class="wide-logos" markdown="1">
![zeromq](/assets/zeromq.png)
![plus](/assets/plus.png)
![json](/assets/json.png)
</div>

We'll use [ZeroMQ](http://zeromq.org) to take
[JSON-RPC](http://www.jsonrpc.org/) requests, and process them asynchronously.
(The synchronous version is [here](./zeromq).) The server should respond to
"ping" with "pong".

Install [aiozmq](https://aiozmq.readthedocs.io/) to take requests and
[jsonrpcserver](http://jsonrpcserver.readthedocs.io/) to process them:

```sh
$ pip install aiozmq jsonrpcserver
```
Create a `server.py`:

```python
import asyncio
import aiozmq
import zmq
from jsonrpcserver.aio import methods
from jsonrpcserver.response import NotificationResponse

@methods.add
async def ping():
    return 'pong'

async def main():
    rep = await aiozmq.create_zmq_stream(zmq.REP, bind='tcp://*:5000')
    while True:
        request = await rep.read()
        response = await methods.dispatch(request[0].decode())
        rep.write((str(response).encode(),))

if __name__ == '__main__':
    asyncio.set_event_loop_policy(aiozmq.ZmqEventLoopPolicy())
    asyncio.get_event_loop().run_until_complete(main())
```
Start the server:

```sh
$ python server.py
```

Synchronous Client
==================
Use [jsonrpcclient](http://jsonrpcclient.readthedocs.io/) to send requests:

``` shell
$ pip install 'jsonrpcclient[pyzmq]'
$ python
```
```python
>>> from jsonrpcclient.zeromq_client import ZeroMQClient
>>> ZeroMQClient('tcp://localhost:5000').request('ping')
--> {"jsonrpc": "2.0", "method": "ping", "id": 1}
<-- {"jsonrpc": "2.0", "result": "pong", "id": 1}
'pong'
```

Asynchronous Client
===================
```sh
$ pip install 'jsonrpcclient[pyzmq]'
```
Create a `client.py`:

```python
import asyncio
import zmq
from jsonrpcclient.zeromq_async_client import ZeroMQAsyncClient

async def main():
    client = ZeroMQAsyncClient('tcp://localhost:5000')
    response = await client.request('ping')
    print(response)

asyncio.set_event_loop(zmq.asyncio.ZMQEventLoop())
asyncio.get_event_loop().run_until_complete(main())
```
```sh
$ python client.py
--> {"jsonrpc": "2.0", "method": "ping", "id": 1}
<-- {"jsonrpc": "2.0", "result": "pong", "id": 1}
'pong'
```
